#!/bin/bash

#github and bitbucket mirror each other
# keep neuron.yale.edu up to date with respect to bitbucket

#crontab -e
#0 */3 * * * /home/hines/neuron/repository_mirror/repository_mirror

# bitbucket and github settings have ssh keys to allow push without
# password.

# basic idea is to have local git master and local hg trunk that
# can be pushed/pulled. Those are compared to the remote versions
# and it is decided if anything needs to be done.
# If so they are updated to be consistent with respective remotes.
# and the local hggit created  by 'git clone hg::...' that uses
# git-remote-hg software is used to make the local hg and git consistent.
# Finally the local versions are pushed back to the remotes.

# original bootstrapping requires a bitbucket hg repository and a
# github git repository with the same name (usually empty or manually
# created from an earlier version of the hg repository)

local=$HOME/neuron/hggit
hgmastersite=ssh://hg@bitbucket.org/nrnhines
gitmastersite=ssh://git@github.com/nrnhines
#hgcopysite=ssh://hines@neuron.yale.edu//home/hg/neuron

repositories=repdir

mkdir -p $local
cd $local

for rep in $repositories ; do

  if test ! -d ${rep}hggit ; then
    git clone hg::$hgmastersite/${rep} ${rep}hggit
    cd ${rep}hggit
    git fetch
    git checkout -b branches/trunk origin/branches/trunk
    git config core.notesRef refs/notes/hg

    # is the github just initialized with no commits or can
    # its master be checked out
    git remote add git $gitmastersite/$rep
    git fetch git
    git checkout -b master git/master
    if test "`git status -b --porcelain`" != "## master...git/master" ; then
      echo "not on branch master...git/master"
      echo "$gitmastersite/$rep does not exist or has no commits"
      echo 1
    fi
    echo "on branch master...git/master"
    cd ..
  fi

  cd ${rep}hggit

  # verify validity
  git branch --list -vv

  oldhg="`git log branches/trunk --format=\"%h\" -n 1`"
  oldgit="`git log master --format=\"%h\" -n 1`"

  git checkout branches/trunk
  git pull
  git checkout master
  git pull

  newhg="`git log branches/trunk --format=\"%h\" -n 1`"
  newgit="`git log master --format=\"%h\" -n 1`"

  echo oldhg $oldhg
  echo oldgit $oldgit
  echo newhg $newhg
  echo newgit $newgit

  if test "$newgit" = "$newhg" ; then
    # they are the same, nothing to do
    continue
  fi

  #is one derived from the other
  m2t=`git log -n 1 --format="%h" master..branches/trunk`
  t2m=`git log -n 1 --format="%h" branches/trunk..master`
  if test "$m2t" = "" ; then # empty means master ahead of trunk
    echo "merge $rep master to trunk and push to bitbucket"
    git checkout branches/trunk
    git merge master branches/trunk
    git push origin
  elif test "$t2m" = "" ; then
    echo "merge $rep trunk to master and push to github"
    git checkout master
    git merge branches/trunk master
    git push git
  else
    echo "Both github and bitbucket for $rep have changes. Resolve manually."
    exit 0
  fi

  exit 0

  if test ! -d ${rep}git ; then
    git clone $gitmastersite/$rep ${rep}git
  fi

  hgmasterid=`hg identify $hgmastersite/$rep`
  hgcopyid=`hg identify $hgcopysite/$rep`

  if test "$hgmasterid" = "$hgcopyid" ; then
    continue
  fi

  echo $repname $hgmasterid $hgcopyid

  cd $HOME/neuron/nrn
  hg pull
  hg push $hgcopysite/$repname

  cd $HOME/neuron/${repname}-git
  $HOME/soft/fast-export/hg-fast-export.sh -r ../$repname
  git reset HEAD
  git checkout -- .
  git push

done
